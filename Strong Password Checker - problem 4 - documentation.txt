Strong Password Checker - problem 4 UMT
The requirements for a strong password are the following:
1. The password must be between 6-20 characters long (this will be the attribute on which the cases for solving the problem are based on)
2. It must contain at least one digit, one uppercase and one lowercase
3. It must not contain sequences of 3 or more repeating characters

Thinking that this is a password I'm assuming that it doesn't have too many charaters so time complexity won't be a problem. The overall time and space complexities are O(n)

For easily parsing the sequences of repeating characters we construct a list containing the length of a contiguous repeating sequence for every different character.

So the approach for this problem is the following:
We check if we have all the required character types(digit, uppercase, lowercase) and store the number of missing types in a variable
Then, depending on the number of characters we split in 3 cases:
1. If we have the right number of charcters (between 6-20) that means we do not need to make any insertions or deletions so the only and most efficient change needed is a replace of an element in a repeating sequence of characters taking into account the missing types. To do this, we do an insertion on every sequence of 3 so the formula for the number of changes (replaces) is given by sum of the number of repeating characters in a continuous sequence divided by 3. Finally, we check whether the replaces are enough to add all the missing characters types(we choose the maximum between the number of changtes to get all the types and the number of changtes to get rid of repeating sequences).
2. If we have less than 6 characters, the change will be an add in between repeating sequences taking into account missing types. The formula for the number of changes is determined by the maximum of the number of changes n eeded to get rid of repeating sequences(additions), number of additions for reaching the required length and the number of additions for adding all the missing types.
3.This is the last and most complicated case, when we have more than 20 characters and we need to do some deletions, but we need to do them wisely, to help us with the repeating sequences. In order to do this we have multiple stages 
	a. We go through the list with the sequences lengths and delete one element from those which have a number of elements divisible by 3 as these are the most useful deletions because they break a repeating sequence of 3. 
	b. Then, we go through the list again and delete from those in which we need to remove 2 elements to get rid of a sequence of repeating characters 
	c. The last ones in our priority list are the other sequences so we delete from those now
	d. In the end, we go through the repeating sequences again and replace the needed characters in order to get rid of repeating sequences.
So the formula is the maximum of the number of replaces for the sequences and the number of replaces for getting all the missing character types summed with the number  number of deletions
Finally, we just return the number of changes required to get a strong password(if the password is already strong we return 0).
 